suite: Test argocd with default values
templates:
  - templates/plumbing/argocd.yaml
release:
  name: release-test
tests:
  - it: should contain argocd by default
    documentIndex: 0
    asserts:
      - isKind:
          of: ArgoCD

  - it: should render the default resourceHealthChecks correctly
    documentIndex: 0
    asserts:
      - isSubset:
          path: spec
          content:
            resourceHealthChecks:
            - kind: PersistentVolumeClaim
              check: |
                hs = {}
                if obj.status ~= nil then
                  if obj.status.phase ~= nil then
                    if obj.status.phase == "Pending" then
                      hs.status = "Healthy"
                      hs.message = obj.status.phase
                      return hs
                    elseif obj.status.phase == "Bound" then
                      hs.status = "Healthy"
                      hs.message = obj.status.phase
                      return hs
                    end
                  end
                end
                hs.status = "Progressing"
                hs.message = "Waiting for PVC"
                return hs
            - kind: InferenceService
              group: serving.kserve.io
              check: |
                local health_status = {}

                health_status.status = "Progressing"
                health_status.message = "Waiting for InferenceService to report status..."

                if obj.status ~= nil then

                  local progressing = false
                  local degraded = false
                  local status_false = 0
                  local status_unknown = 0
                  local msg = ""

                  if obj.status.modelStatus ~= nil then
                    if obj.status.modelStatus.transitionStatus ~= "UpToDate" then
                      if obj.status.modelStatus.transitionStatus == "InProgress" then
                        progressing = true
                      else
                        degraded = true
                      end
                      msg = msg .. "0: transitionStatus | " .. obj.status.modelStatus.transitionStatus
                    end
                  end

                  if obj.status.conditions ~= nil then
                    for i, condition in pairs(obj.status.conditions) do

                      -- A condition is healthy if its status is True.
                      -- However, for the 'Stopped' condition, a 'False' status is the healthy state.
                      local is_healthy_condition = (condition.status == "True")
                      if condition.type == "Stopped" then
                        is_healthy_condition = (condition.status == "False")
                      end

                      if not is_healthy_condition then
                        -- This condition represents a problem, so update counters and the message.
                        if condition.status == "Unknown" then
                          status_unknown = status_unknown + 1
                        else
                          status_false = status_false + 1
                        end

                        msg = msg .. " | " .. i .. ": " .. condition.type .. " | " .. condition.status
                        if condition.reason ~= nil and condition.reason ~= "" then
                          msg = msg .. " | " .. condition.reason
                        end
                        if condition.message ~= nil and condition.message ~= "" then
                          msg = msg .. " | " .. condition.message
                        end
                      end

                    end

                    if progressing == false and degraded == false and status_unknown == 0 and status_false == 0 then
                      health_status.status = "Healthy"
                      msg = "InferenceService is healthy."
                    elseif degraded == false and status_unknown >= 0 then
                      health_status.status = "Progressing"
                    else
                      health_status.status = "Degraded"
                    end

                    health_status.message = msg
                  end
                end

                return health_status

  - it: should render custom resourceHealthChecks correctly
    set:
      clusterGroup:
        argoCD:
          resourceHealthChecks:
            - kind: Foo
              group: Bar
              check: |
                return true
    documentIndex: 0
    asserts:
      - isSubset:
          path: spec
          content:
            resourceHealthChecks:
              - kind: Foo
                group: Bar
                check: |
                  return true

  - it: should render the default resourceExclusions correctly
    documentIndex: 0
    asserts:
      - isSubset:
          path: spec
          content:
            resourceExclusions: |
              - apiGroups:
                - tekton.dev
                kinds:
                - TaskRun
                - PipelineRun

  - it: should render the default resourceExclusions correctly when excludeESO is true
    documentIndex: 0
    set:
      global.excludeESO: true
    asserts:
      - isSubset:
          path: spec
          content:
            resourceExclusions: |
              - apiGroups:
                - tekton.dev
                kinds:
                - TaskRun
                - PipelineRun
              - apiGroups:
                - external-secrets.io
                kinds:
                - ExternalSecret

  - it: should render custom resourceExclusions correctly
    set:
      clusterGroup:
        argoCD:
          resourceExclusions: |
            - apiGroups:
              - foo.bar
              kinds:
              - Foo
              - Baz
    documentIndex: 0
    asserts:
      - isSubset:
          path: spec
          content:
            resourceExclusions: |
              - apiGroups:
                - foo.bar
                kinds:
                - Foo
                - Baz
